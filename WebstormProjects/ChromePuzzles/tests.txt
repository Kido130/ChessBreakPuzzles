# Chess Puzzle Website Testing Scenarios

## Functionality Tests

1. **Puzzle Loading**
   - Issue: Puzzles don't load on initial page visit
   - Solution: Check browser console for JavaScript errors; ensure puzzles.js is correctly loaded

2. **Move Validation**
   - Issue: Correct moves not recognized or incorrect moves allowed
   - Solution: Verify move format consistency between Chess.js and puzzle data; ensure moves are in the correct format (e.g., 'e2e4' vs 'e2-e4')

3. **Visual Feedback**
   - Issue: Green/red indicators not appearing after moves
   - Solution: Check DOM for proper square-* classes; verify z-index of indicators; ensure CSS transitions working

4. **Rating Adjustment**
   - Issue: Rating not updating correctly after puzzle completion
   - Solution: Log rating calculations to verify formula is working; ensure DOM updates with new rating

5. **Puzzle Selection**
   - Issue: Puzzles outside user's rating range being selected
   - Solution: Log puzzle ratings and selection criteria; verify filter logic and range expansion

6. **Board Orientation**
   - Issue: Board orientation not matching required side to play
   - Solution: Verify orientation logic based on FEN analysis is correct

7. **Computer Moves**
   - Issue: Computer not making the first move or subsequent moves
   - Solution: Check move timing and sequencing; verify move format parsing

8. **Local Storage**
   - Issue: Completed puzzles or rating not persisting between sessions
   - Solution: Validate localStorage writes/reads; check browser storage permissions

9. **Responsive Design**
   - Issue: Board display issues on mobile devices
   - Solution: Test with various screen sizes; ensure resize event listeners are working

10. **Puzzle Completion**
    - Issue: Success message not showing or next puzzle not loading
    - Solution: Verify DOM updates; check event listeners on next puzzle button

## Edge Cases

1. **No Puzzles Available**
   - Issue: All puzzles completed, no more available in range
   - Solution: Add code to handle this case with a meaningful message and option to reset

2. **Illegal Moves in Puzzles**
   - Issue: A puzzle contains a move that Chess.js considers illegal
   - Solution: Add validation for puzzle moves against Chess.js rules before presenting puzzles

3. **Rating Extremes**
   - Issue: User rating gets extremely high or low
   - Solution: Implement rating bounds (e.g., 100-3000) to prevent unrealistic ratings

4. **Browser Compatibility**
   - Issue: Features not working in certain browsers
   - Solution: Test across multiple browsers; add polyfills for ES6+ features if needed

5. **Special Chess Moves**
   - Issue: Castling, en passant, or promotion not handled correctly
   - Solution: Ensure Chess.js is properly configured to handle these special moves

6. **Network Issues**
   - Issue: External resources (CSS, JS libraries) fail to load
   - Solution: Add error handling for resource loading; consider bundling dependencies

7. **Private Browsing**
   - Issue: Local storage doesn't work in private/incognito mode
   - Solution: Detect private browsing and inform user of limitations

8. **Multiple Tabs**
   - Issue: Rating conflicts when using multiple tabs
   - Solution: Consider using storage events to sync data between tabs

## Specific Fixes

1. **Move Format Consistency**
   - Fixed by ensuring all moves use the same format (e.g., 'e2e4' without hyphen)

2. **Square Selection Logic**
   - Fixed by using the correct Chess.js square notation and board coordinates

3. **Promotion Handling**
   - Fixed by always promoting to queen for simplicity

4. **Board Orientation**
   - Fixed by determining orientation based on the color to move in the FEN

5. **Rating Calculation**
   - Fixed by implementing the specified formula with proper directional adjustments

6. **Visual Feedback Timing**
   - Fixed by setting appropriate delays for indicators and move animations

7. **Puzzle Filtering Logic**
   - Fixed by improving the filter to respect rating ranges and completed puzzles

8. **Responsive Design Issues**
   - Fixed by attaching window resize handler to board and using percentage-based sizing

9. **Local Storage Persistence**
   - Fixed by using consistent key names and proper JSON serialization

10. **Move Validation**
    - Fixed by comparing exact move strings and handling illegal moves gracefully

Chess Puzzle Application Test Cases

1. Rating System Tests:
- Rating changes are saved immediately to localStorage after each change
- Rating changes show correct animation and indicator
- Rating bounds (100-3000) are enforced
- Total rating change in success message includes all penalties and failures
- Hint penalty (-5) is applied correctly and saved
- Multiple failures on same puzzle accumulate in total rating change
- Rating change indicator shows up next to current rating
- Rating animations work smoothly

2. Premove Tests:
- Can premove while opponent is moving
- Premove executes correctly after opponent's move
- Invalid premoves are rejected
- Premove cancels if player makes different move
- Multiple premoves replace each other
- Premove works for both white and black pieces
- Premove animation and sound work correctly

3. Puzzle Progress Tests:
- Completed puzzles are saved immediately to localStorage
- Puzzles are marked as completed whether failed or succeeded
- New puzzles are not from completed list
- System offers reset when all puzzles completed
- Puzzle selection respects rating range
- Puzzle difficulty matches user rating

4. UI Element Tests:
- Success message shows correct total rating change
- Failure indicator shows and hides correctly
- Next puzzle button appears after failure
- Hint highlighting works correctly
- Move indicators (✓/✗) show correctly
- Turn indicator updates properly
- Loading indicator shows during puzzle load
- Board orientation is correct for each puzzle

5. Game Mechanics Tests:
- Illegal moves are prevented
- Correct moves are accepted
- Wrong moves are properly rejected
- Promotion always to queen works
- Move sound plays correctly
- Board position updates properly
- Puzzle validation works

6. Error Recovery Tests:
- Invalid puzzle data handling
- Network error handling
- localStorage unavailable handling
- Invalid move sequence handling
- Browser refresh handling
- Multiple tab support

7. Performance Tests:
- Smooth animations
- Quick puzzle loading
- Responsive UI
- No memory leaks
- Efficient localStorage usage

8. Edge Cases:
- Minimum rating (100) behavior
- Maximum rating (3000) behavior
- Empty puzzle list handling
- Rapid move sequences
- Multiple hints on same puzzle
- Multiple failures on same puzzle
- Browser tab switching
- Window resize handling

Action Items:
1. Test each scenario
2. Document any failures
3. Fix issues found
4. Retest after fixes
5. Verify localStorage persistence
6. Check mobile responsiveness
7. Validate cross-browser compatibility 